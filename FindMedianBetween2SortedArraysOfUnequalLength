
*********** Using Logic of "finding kth smallest element between two sorted arrays of unequal length"***************
/*
Question: http://www.geeksforgeeks.org/median-of-two-sorted-arrays/
Source: http://algorithmsandme.blogspot.com/2014/12/find-median-of-two-sorted-arrays-of.html#.VLNiR5_0_VN
		http://algorithmsandme.blogspot.in/2014/12/fins-kth-smallest-element-in-two-sorted.html#.VLNiz5_0_VN
	    http://www.geeksforgeeks.org/median-of-two-sorted-arrays/
*/
package FindMedianBetween2SortedArraysOfUnequalLength;

import java.util.Arrays;
import java.util.Scanner;

public class UsingKthSmallestElementLogic {
	
public static void main(String[] args) {
	Scanner in = new Scanner(System.in);
	try{
		System.out.println("Enter the number of elements in the first SORTED array");
		int n = in.nextInt();
		int[] array1 = new int[n];
		System.out.println("Enter the elements of the first SORTED array");
		for(int i=0;i<n;i++)
			array1[i]=in.nextInt();
		System.out.println("Enter the number of elements in the second SORTED array");
		int m = in.nextInt();
		int[] array2 = new int[m];
		System.out.println("Enter the elements of the second SORTED array");
		for(int i=0;i<m;i++)
			array2[i]=in.nextInt();
		System.out.println("Median of the two SORTED arrays is: "+findMedian(array1,array2,array1.length,array2.length));
	}
	finally{
		in.close();
	}
}
private static int findMedian(int[] a, int[] b,
		int aLength, int bLength) { 
	
	int left = (aLength+bLength+1)>>1;
	int right = (aLength+bLength+2)>>1;
	return ((findKthSmallestElement(a,b,a.length,b.length,left)+findKthSmallestElement(a,b,a.length,b.length,right))/2);
}
private static int findKthSmallestElement(int[] a, int[] b,
		int aLength, int bLength, int k) {                    // All the 5 parameters passed are VERY VERY IMP
	
	/* to maintain uniformity, we will assume that size_a is smaller than size_b
    else we will swap array in call :) */
	if(aLength>bLength)
		return findKthSmallestElement(b, a, bLength, aLength, k);
	
	/* We have TWO BASE CASES
	 * Now case when size of smaller array is 0 i.e there is no elemt in one array*/
    //BASE CASE 1. If the smallest array length is 0
	if(aLength == 0 && bLength > 0)
            return b[k-1]; // due to zero based index
    
    /* case where k==1 that means we have hit limit */
	//BASE CASE 2. If k==1
	if(k==1)
            return Math.min(a[0], b[0]);

    /* Now the divide and conquer part */
    int i =  Math.min(aLength, k/2) ; // k should be less than the size of array  
    int j =  Math.min(bLength, k/2) ; // k should be less than the size of array  

    if(a[i-1] > b[j-1])
            // Now we need to find only K-j th element
            return findKthSmallestElement(a, Arrays.copyOfRange(b, j, b.length), a.length, b.length -j, k-j);
    else
            return findKthSmallestElement(Arrays.copyOfRange(a, i, a.length), b, a.length-i, b.length,  k-i);
}
}
/*
Analysis:
	Time Complexity = O(log(n+m))
    Space Complexity = O(1)*/

**************************** Using comparison of individual medians *************************************
// LEFT

**************************** Using Merge method of Mergesort ********************************************

/*
Question: http://www.geeksforgeeks.org/median-of-two-sorted-arrays/
Source: http://www.geeksforgeeks.org/median-of-two-sorted-arrays/
		http://theoryapp.com/find-median-of-two-sorted-arrays/
*/
package FindMedianBetween2SortedArraysOfUnequalLength;

import java.util.Scanner;

public class UsingMergeMethodOfMergeSort {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		try{
			System.out.println("Enter the number of elements in the first SORTED array");
			int n = in.nextInt();
			int[] array1 = new int[n];
			System.out.println("Enter the elements of the first SORTED array");
			for(int i=0;i<n;i++)
				array1[i]=in.nextInt();
			System.out.println("Enter the number of elements in the second SORTED array");
			int m = in.nextInt();
			int[] array2 = new int[m];
			System.out.println("Enter the elements of the second SORTED array");
			for(int i=0;i<m;i++)
				array2[i]=in.nextInt();
			System.out.println("Median of the two SORTED arrays is: "+findMedianUsingMergeOfMergeSort(array1,array2));
		}
		finally{
			in.close();
		}
	}
	private static int findMedianUsingMergeOfMergeSort(int[] a, int[] b) {
		
	/*  a1 array and a2 array can be of different lengths.
		For Example:
	  1.
		a1.length = 3
		a2.length = 6
		totalElements = 3+6=9 (odd number)
	  2.
		a1.length = 4
		a2.length = 4
		totalElements = 4+4=8 (even number)
	*/
		int totalElements = a.length+b.length;  // totalElements is the addition of the individual array lengths
		int currentMedian = 0;
		int prevMedian = 0;
		int i=0; // Index for traversing array1
		int j=0; // Index for traversing array2
		for(int k=0;k<totalElements;k++){    // k is index for traversing the totalElements of array1 and array2
			
			
		/*NOTE: In this entire for loop, the "if", "else" and "else if" is VERY IMP. DONOT interchange among them*/
			
			// if array1 is exhausted
			if(i==a.length)
				currentMedian=b[j++]; // elements of the second array would be considered
			

			// if array2 is exhausted
			else if(j==b.length)
				currentMedian=a[i++]; // elements of the first array would be considered
			
			else if(a[i]<b[j])
				currentMedian=a[i++];
			
			else //(b[j]<=a[i])            // this condition is ONLY "else" and not "if" OR "else if"
				currentMedian=b[j++];
			 
			if(k==totalElements/2) // we reached the middle of the totalElements where the median of the combined arrays is found
				break;                 
			
			prevMedian = currentMedian;
			
		}
		
		// if the totalElements are odd
		if(totalElements%2!=0)
			return currentMedian;
		else
			return (prevMedian+currentMedian)/2;
	}
}
/*
Analysis:
	Time Complexity = Linear Time, O((m+n)/2)
	Space Complexity = O(1)
*/
